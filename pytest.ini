[tool:pytest]
# Pytest configuration for comprehensive API testing

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --cov=src
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --junitxml=tests/reports/junit.xml
    --html=tests/reports/report.html
    --self-contained-html

# Markers for test organization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for API endpoints
    performance: Performance and load tests
    e2e: End-to-end workflow tests
    slow: Tests that take longer to execute
    consumption: Tests related to consumption API
    quality: Tests related to water quality API
    forecasting: Tests related to forecasting API
    reports: Tests related to reports API
    kpis: Tests related to KPIs API
    filtering: Tests related to filtering API
    smoke: Smoke tests for basic functionality
    regression: Regression tests for bug fixes
    security: Security-related tests
    database: Tests that require database access
    external: Tests that require external services

# Test filtering options
minversion = 6.0
required_plugins = 
    pytest-asyncio
    pytest-cov
    pytest-html
    pytest-xdist
    pytest-mock

# Async test configuration
asyncio_mode = auto

# Parallel execution
# Uncomment for parallel test execution:
# addopts = -n auto

# Test timeout (in seconds)
timeout = 300

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = src
omit = 
    src/tests/*
    src/**/__pycache__/*
    src/**/test_*
    */venv/*
    */virtualenv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    @abstract 