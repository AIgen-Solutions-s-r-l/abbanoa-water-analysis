name: CI - Efficiency Service

on:
  push:
    paths:
      - 'src/core/efficiency_service.py'
      - 'src/routes/efficiency.py'
      - 'src/schemas/api/efficiency.py'
      - 'tests/test_efficiency_service.py'
      - '.github/workflows/ci-efficiency.yml'
  pull_request:
    paths:
      - 'src/core/efficiency_service.py'
      - 'src/routes/efficiency.py'
      - 'src/schemas/api/efficiency.py'
      - 'tests/test_efficiency_service.py'
      - '.github/workflows/ci-efficiency.yml'

jobs:
  efficiency:
    name: Efficiency Service CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: abbanoa_processing
          POSTGRES_USER: abbanoa_user
          POSTGRES_PASSWORD: abbanoa_secure_pass
        ports:
          - 5434:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-api.txt
          pip install -r requirements-services.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          pip install flake8 black mypy bandit safety

      - name: Wait for services
        run: |
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5434 -U abbanoa_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Wait for Redis
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Set up database schema
        run: |
          export PGPASSWORD=abbanoa_secure_pass
          psql -h localhost -p 5434 -U abbanoa_user -d abbanoa_processing -f src/infrastructure/database/postgres_schema.sql || true
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: abbanoa_processing
          POSTGRES_USER: abbanoa_user
          POSTGRES_PASSWORD: abbanoa_secure_pass

      - name: Lint - Code formatting with Black
        run: |
          black --check --diff src/core/efficiency_service.py
          black --check --diff src/routes/efficiency.py
          black --check --diff src/schemas/api/efficiency.py
          black --check --diff tests/test_efficiency_service.py

      - name: Lint - Code quality with Flake8
        run: |
          flake8 src/core/efficiency_service.py --max-line-length=100 --ignore=E501,W503
          flake8 src/routes/efficiency.py --max-line-length=100 --ignore=E501,W503
          flake8 src/schemas/api/efficiency.py --max-line-length=100 --ignore=E501,W503
          flake8 tests/test_efficiency_service.py --max-line-length=100 --ignore=E501,W503

      - name: Lint - Type checking with MyPy
        run: |
          mypy src/core/efficiency_service.py --ignore-missing-imports
          mypy src/routes/efficiency.py --ignore-missing-imports
          mypy src/schemas/api/efficiency.py --ignore-missing-imports
        continue-on-error: true

      - name: Security - Bandit security linting
        run: |
          bandit -r src/core/efficiency_service.py -f json -o bandit-efficiency.json || true
          bandit -r src/routes/efficiency.py -f json -o bandit-routes.json || true
          bandit -r src/schemas/api/efficiency.py -f json -o bandit-schemas.json || true

      - name: Security - Safety check for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true

      - name: Test - Unit tests with coverage
        run: |
          pytest tests/test_efficiency_service.py::TestEfficiencyService -v --cov=src/core/efficiency_service --cov-report=html --cov-report=xml --cov-report=term-missing
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: abbanoa_processing
          POSTGRES_USER: abbanoa_user
          POSTGRES_PASSWORD: abbanoa_secure_pass
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Test - Integration tests
        run: |
          pytest tests/test_efficiency_service.py::TestEfficiencyAPI -v
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: abbanoa_processing
          POSTGRES_USER: abbanoa_user
          POSTGRES_PASSWORD: abbanoa_secure_pass
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Test - Full test suite
        run: |
          pytest tests/test_efficiency_service.py -v --tb=short
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: abbanoa_processing
          POSTGRES_USER: abbanoa_user
          POSTGRES_PASSWORD: abbanoa_secure_pass
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: efficiency-service
          name: efficiency-service-coverage
          fail_ci_if_error: false

      - name: Build - Docker image build test
        run: |
          # Create a simple Dockerfile for testing if it doesn't exist
          if [ ! -f Dockerfile.efficiency ]; then
            cat > Dockerfile.efficiency << 'EOF'
          FROM python:3.12-slim

          WORKDIR /app

          # Copy requirements
          COPY requirements*.txt ./

          # Install dependencies
          RUN pip install --no-cache-dir -r requirements.txt && \
              pip install --no-cache-dir -r requirements-api.txt

          # Copy source code
          COPY src/ src/
          COPY tests/ tests/

          # Expose port
          EXPOSE 8000

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8000/v1/efficiency/health || exit 1

          # Run the application
          CMD ["python", "-m", "uvicorn", "src.presentation.api.app:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF
          fi

      - name: Build - Docker build and tag
        run: |
          docker build -f Dockerfile.efficiency -t abbanoa/efficiency-service:latest .
          docker build -f Dockerfile.efficiency -t abbanoa/efficiency-service:${{ github.sha }} .

      - name: Build - Docker image inspection
        run: |
          docker images abbanoa/efficiency-service
          docker inspect abbanoa/efficiency-service:latest

      - name: Build - Docker container test
        run: |
          # Test that the container can start (but don't run the full service)
          docker run --rm --entrypoint python abbanoa/efficiency-service:latest -c "
          import sys
          sys.path.insert(0, '/app')
          from src.core.efficiency_service import EfficiencyService
          from src.routes.efficiency import router
          from src.schemas.api.efficiency import EfficiencyResponse
          print('✓ All modules imported successfully')
          "

      - name: Cleanup - Remove test artifacts
        run: |
          rm -f bandit-*.json safety-report.json
          docker rmi abbanoa/efficiency-service:latest || true
          docker rmi abbanoa/efficiency-service:${{ github.sha }} || true
        if: always()

      - name: Summary - Job results
        run: |
          echo "## Efficiency Service CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linting**: Code formatting, quality, and type checking completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Testing**: Unit and integration tests executed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security**: Bandit and Safety security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build**: Docker image build and validation successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files tested:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`src/core/efficiency_service.py\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`src/routes/efficiency.py\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`src/schemas/api/efficiency.py\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`tests/test_efficiency_service.py\`" >> $GITHUB_STEP_SUMMARY
        if: always() 